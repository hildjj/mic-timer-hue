// Generated by CoffeeScript 1.10.0
(function() {
  var BlinkenHue, colors, do_error, keypress, monitor, path, q, seconds;

  q = require('q');

  keypress = require('keypress');

  colors = require('colors');

  BlinkenHue = require('./blinkenhue');

  path = require('path');

  seconds = 1000;

  monitor = function(b, total, warn) {
    var reset_t, start, t;
    t = null;
    start = null;
    keypress(process.stdin);
    reset_t = function() {
      if (t != null) {
        clearTimeout(t);
      }
      t = null;
      return start = null;
    };
    process.stdin.on('keypress', function(ch, key) {
      if (ch === 'q') {
        console.log("");
        reset_t();
        b.do_reset().fin(function() {
          return process.exit(0);
        });
      }
      if (ch === 'c') {
        reset_t();
        console.log('\nreset'.blue);
        b.do_reset();
      }
      if (ch === ' ') {
        reset_t();
        start = new Date();
        console.log('\nstart'.blue, start.toISOString());
        t = setTimeout(function() {
          t = setTimeout(function() {
            t = null;
            start = null;
            console.log('\nalarm'.red);
            return b.do_alarm();
          }, warn * seconds);
          return b.do_warn();
        }, (total - warn) * seconds);
        return b.do_start().done();
      }
    });
    process.stdin.setRawMode(true);
    process.stdin.resume;
    setInterval(function() {
      var d, ds;
      if (t && start) {
        d = total - Math.round((new Date() - start) / 1000);
        ds = ("  " + d).slice(-3);
        if (d > warn) {
          return process.stdout.write(("\r" + ds).green);
        } else {
          return process.stdout.write(("\r" + ds + " warn").yellow);
        }
      }
    }, 50);
    console.log('READY');
    return true;
  };

  do_error = function(er) {
    return console.log("\nERROR:".red, er);
  };

  this.run = function(argv) {
    var argfile, b, f, ip, num, program, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, total, warn;
    argfile = null;
    program = require('commander').option('-i --ip [address]', 'IP address').option('-n --num [usernumber]', 'User number').option('-w --warn [secs]', 'Warn with [secs] left').option('-t --time [secs]', 'Total time to allow').option('-f --file [filename]', 'filename for .json args').parse(process.argv);
    if (program.file) {
      f = path.join(process.cwd(), program.file);
      console.log("FILE: " + f);
      argfile = require(f);
    }
    warn = ((ref = argfile != null ? argfile.warn : void 0) != null ? ref : (ref1 = program.warn) != null ? ref1 : 30) * 1;
    total = ((ref2 = argfile != null ? argfile.total : void 0) != null ? ref2 : (ref3 = program.time) != null ? ref3 : 120) * 1;
    ip = (ref4 = argfile != null ? argfile.ip : void 0) != null ? ref4 : (ref5 = program.ip) != null ? ref5 : null;
    num = (ref6 = argfile != null ? argfile.num : void 0) != null ? ref6 : (ref7 = program.num) != null ? ref7 : null;
    b = new BlinkenHue(ip, num);
    return b.start().then(function(b) {
      return monitor(b, total, warn);
    }).fail(do_error).done();
  };

}).call(this);
