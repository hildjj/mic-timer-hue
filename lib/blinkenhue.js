// Generated by CoffeeScript 1.9.1
(function() {
  var BlinkenHue, blue, colors, do_error, green, hapi, q, red, yellow;

  q = require('q');

  hapi = require('node-hue-api');

  colors = require('colors');

  blue = 46920;

  red = 65280;

  yellow = 12750;

  green = 25500;

  do_error = function(er) {
    return console.log("\nERROR:".red, er);
  };

  module.exports = BlinkenHue = (function() {
    function BlinkenHue(ip, num) {
      this.ip = ip;
      this.num = num;
      this.hu = null;
      this.pending = false;
    }

    BlinkenHue.prototype._connect = function() {
      this.hu = new hapi.HueApi(this.ip, this.num, 1000);
      return this.hu.config().then((function(_this) {
        return function(c) {
          if (c.ipaddress == null) {
            console.log('Bad config:', c);
            process.exit(1);
          }
          return _this;
        };
      })(this));
    };

    BlinkenHue.prototype._getIP = function() {
      if (this.ip != null) {
        return q.resolve(this.ip);
      } else {
        return hapi.nupnpSearch().then((function(_this) {
          return function(r) {
            _this.ip = r[0].ipaddress;
            console.log("IP: " + _this.ip);
            return _this.ip;
          };
        })(this));
      }
    };

    BlinkenHue.prototype.start = function() {
      return this._getIP().then((function(_this) {
        return function() {
          var h;
          if (_this.num != null) {
            return _this._connect();
          } else {
            h = new hapi.HueApi();
            return h.registerUser(addr).then(function(user) {
              console.log("USER: " + user);
              this.num = user;
              return this._connect();
            });
          }
        };
      })(this));
    };

    BlinkenHue.prototype.set_state = function(state) {
      if (this.pending) {
        do_error('Overlapped');
        return q.reject('Overlapped');
      } else {
        this.pending = true;
        return this.hu.setGroupLightState(0, state).fail(function(er) {
          return do_error(er);
        }).fin((function(_this) {
          return function() {
            return q.timeout(50).then(function() {
              return _this.pending = false;
            });
          };
        })(this));
      }
    };

    BlinkenHue.prototype.do_reset = function() {
      return this.set_state(hapi.lightState.create().transitionInstant().off());
    };

    BlinkenHue.prototype.do_start = function() {
      return this.set_state(hapi.lightState.create().hue(green).bri(64).sat(255).transitionInstant().on());
    };

    BlinkenHue.prototype.do_warn = function() {
      return this.set_state(hapi.lightState.create().hue(yellow).bri(128).sat(255).transitiontime(20).on());
    };

    BlinkenHue.prototype.do_alarm = function() {
      return this.set_state(hapi.lightState.create().hue(red).bri(255).sat(255).transitionInstant().alert('select').on());
    };

    return BlinkenHue;

  })();

}).call(this);
